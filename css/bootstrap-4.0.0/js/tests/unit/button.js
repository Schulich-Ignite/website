$((function(){"use strict";QUnit.module("button plugin"),QUnit.test("should be defined on jquery object",(function(t){t.expect(1),t.ok($(document.body).button,"button method is defined")})),QUnit.module("button",{beforeEach:function(){$.fn.bootstrapButton=$.fn.button.noConflict()},afterEach:function(){$.fn.button=$.fn.bootstrapButton,delete $.fn.bootstrapButton}}),QUnit.test("should provide no conflict",(function(t){t.expect(1),t.strictEqual(typeof $.fn.button,"undefined","button was set back to undefined (org value)")})),QUnit.test("should return jquery collection containing the element",(function(t){t.expect(2);var e=$("<div/>"),n=e.bootstrapButton();t.ok(n instanceof $,"returns jquery collection"),t.strictEqual(n[0],e[0],"collection contains element")})),QUnit.test("should toggle active",(function(t){t.expect(2);var e=$('<button class="btn" data-toggle="button">mdo</button>');t.ok(!e.hasClass("active"),"btn does not have active class"),e.bootstrapButton("toggle"),t.ok(e.hasClass("active"),"btn has class active")})),QUnit.test("should toggle active when btn children are clicked",(function(t){t.expect(2);var e=$('<button class="btn" data-toggle="button">mdo</button>'),n=$("<i/>");e.append(n).appendTo("#qunit-fixture"),t.ok(!e.hasClass("active"),"btn does not have active class"),n.trigger("click"),t.ok(e.hasClass("active"),"btn has class active")})),QUnit.test("should toggle aria-pressed",(function(t){t.expect(2);var e=$('<button class="btn" data-toggle="button" aria-pressed="false">redux</button>');t.strictEqual(e.attr("aria-pressed"),"false","btn aria-pressed state is false"),e.bootstrapButton("toggle"),t.strictEqual(e.attr("aria-pressed"),"true","btn aria-pressed state is true")})),QUnit.test("should toggle aria-pressed on buttons with container",(function(t){t.expect(1);$("#qunit-fixture").append('<div class="btn-group" data-toggle="buttons"><button id="btn1" class="btn btn-secondary" type="button">One</button><button class="btn btn-secondary" type="button">Two</button></div>'),$("#btn1").bootstrapButton("toggle"),t.strictEqual($("#btn1").attr("aria-pressed"),"true")})),QUnit.test("should toggle aria-pressed when btn children are clicked",(function(t){t.expect(2);var e=$('<button class="btn" data-toggle="button" aria-pressed="false">redux</button>'),n=$("<i/>");e.append(n).appendTo("#qunit-fixture"),t.strictEqual(e.attr("aria-pressed"),"false","btn aria-pressed state is false"),n.trigger("click"),t.strictEqual(e.attr("aria-pressed"),"true","btn aria-pressed state is true")})),QUnit.test("should trigger input change event when toggled button has input field",(function(t){t.expect(1);var e=t.async(),n=$('<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary"><input type="radio" id="radio" autocomplete="off">Radio</label></div>').appendTo("#qunit-fixture");n.find("input").on("change",(function(n){n.preventDefault(),t.ok(!0,"change event fired"),e()})),n.find("label").trigger("click")})),QUnit.test("should check for closest matching toggle",(function(t){t.expect(12);var e=$('<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary active"><input type="radio" name="options" id="option1" checked="true"> Option 1</label><label class="btn btn-primary"><input type="radio" name="options" id="option2"> Option 2</label><label class="btn btn-primary"><input type="radio" name="options" id="option3"> Option 3</label></div>').appendTo("#qunit-fixture"),n=e.children().eq(0),a=e.children().eq(1);t.ok(n.hasClass("active"),"btn1 has active class"),t.ok(n.find("input").prop("checked"),"btn1 is checked"),t.ok(!a.hasClass("active"),"btn2 does not have active class"),t.ok(!a.find("input").prop("checked"),"btn2 is not checked"),a.find("input").trigger("click"),t.ok(!n.hasClass("active"),"btn1 does not have active class"),t.ok(!n.find("input").prop("checked"),"btn1 is not checked"),t.ok(a.hasClass("active"),"btn2 has active class"),t.ok(a.find("input").prop("checked"),"btn2 is checked"),a.find("input").trigger("click"),t.ok(!n.hasClass("active"),"btn1 does not have active class"),t.ok(!n.find("input").prop("checked"),"btn1 is not checked"),t.ok(a.hasClass("active"),"btn2 has active class"),t.ok(a.find("input").prop("checked"),"btn2 is checked")})),QUnit.test('should not add aria-pressed on labels for radio/checkbox inputs in a data-toggle="buttons" group',(function(t){t.expect(2);var e=$('<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary"><input type="checkbox" autocomplete="off"> Checkbox</label><label class="btn btn-primary"><input type="radio" name="options" autocomplete="off"> Radio</label></div>').appendTo("#qunit-fixture"),n=e.children().eq(0),a=e.children().eq(1);n.find("input").trigger("click"),t.ok(n.is(":not([aria-pressed])"),"label for nested checkbox input has not been given an aria-pressed attribute"),a.find("input").trigger("click"),t.ok(a.is(":not([aria-pressed])"),"label for nested radio input has not been given an aria-pressed attribute")})),QUnit.test("should handle disabled attribute on non-button elements",(function(t){t.expect(2);var e=$('<div class="btn-group disabled" data-toggle="buttons" aria-disabled="true" disabled><label class="btn btn-danger disabled" aria-disabled="true" disabled><input type="checkbox" aria-disabled="true" autocomplete="off" disabled class="disabled"/></label></div>').appendTo("#qunit-fixture").children().eq(0),n=e.children().eq(0);e.trigger("click"),t.ok(e.is(":not(.active)"),"button did not become active"),t.ok(!n.is(":checked"),"checkbox did not get checked")}))}));